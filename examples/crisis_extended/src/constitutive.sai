/**/
institution_id : bhInst.


status_functions:

agents: mayor, firefighter, table_mediator, interaction_inspector, logistic_cell, support_cell, representant_pco.
events: evacuate(Zone), command_evacuation(Zone),tangibleInteraction(Table,TangibleObject,X,Y,Actor), inform_invalid_evacuation(Zone,Target), register_evacuated_people(Zone), name_representant_pco, link_mayor_pco, support_evacuation(Zone).
states: secure(Zone), insecure(Zone), electric_risky(Zone), informTangibleInteraction(Table,TangibleObject,X,Y), priority(Zone), max_time_to_inform.




constitutive_rules:


/***** Constitutive rules related to the crisis scenario *****/


                       /*** Agent-Status Functions constitutive rules ***/
/* An actor is the mayor if it has checked in the table_mayor and if there is not other actor being the mayor */
1: Actor count-as mayor
   when checkin(table_mayor)[sai__agent(Actor)] 
   while not(Other is mayor)|
         Actor is mayor.


/* An actor is a firefighter if it has checked in the table_fire_brigade */
2: Actor count-as firefighter 
   when checkin(table_fire_brigade)[sai__agent(Actor)].


/* An actor is a member of the logistic cell if it has checked in the table_lc */
3: Actor count-as logistic_cell 
   when checkin(table_lc)[sai__agent(Actor)].

/* An actor is a member of the support cell if it has checked in the table_sc */
4: Actor count-as support_cell
   when checkin(table_sc)[sai__agent(Actor)].

/* An actor is the mayor's representant at the PCO when the mayor sends it naming message */
5: To count-as representant_pco
   when putTangible(Table,message_tangible_object,X,Y,From,To,represent_mayor_pco)[sai__agent(Actor)] 
   while From is mayor. 



               /*** Event-Status Functions constitutive rules ***/
/* The mayor putting the object launch_tangible_object in the coordinates 1,2 of any table counts as the command to evacuate the downtown*/
6: putTangible(_,launch_tangible_object,1,2)[sai__agent(Actor)] count-as command_evacuation(downtown)
   while Actor is mayor.

/* Firefighter and logistic cell putting the object launch_tangible_object in the coordinates 1,2 of any table counts as the evacuation of the downtown */
7: putTangible(_,launch_tangible_object,1,2)[sai__agent(Actor)] count-as evacuate(downtown)
   while Actor is firefighter | Actor is logistic_cell.

/* The support cell putting the object launch_tangible_object in the coordinates 1,2 of any table counts as supporting the evacuation of the downtown */
8: putTangible(_,launch_tangible_object,1,2)[sai__agent(Actor)] count-as support_evacuation(downtown)
   while Actor is support_cell.

/* Rules 9 to 11: similar to 9 to 11, but related to the industrial zone  */
9: putTangible(_,launch_tangible_object,3,3)[sai__agent(Actor)] count-as command_evacuation(industrial_zone)
   while Actor is mayor.

10: putTangible(_,launch_tangible_object,3,3)[sai__agent(Actor)] count-as evacuate(industrial_zone)
   while Actor is firefighter | Actor is logistic_cell.

11: putTangible(_,launch_tangible_object,3,3)[sai__agent(Actor)] count-as support_evacuation(industrial_zone)
   while Actor is support_cell.

/* The mayor names its representant at the PCO when it sends a message with the content "represent_mayor_pco" */
12: putTangible(Table,message_tangible_object,X,Y,From,Target,represent_mayor_pco)[sai__agent(Actor)] 
    count-as name_representant_pco
    while From is mayor. 


/* The PCO is linked to mayor when the mayor's representant at PCO sends him a message with the content "crisis_report" */
13: putTangible(Table,message_tangible_object,X,Y,From,Target,crisis_report)[sai__agent(Actor)] 
    count-as link_mayor_pco
    while From is representant_pco & Target is mayor.



/* A zone preventive phase of crisis managament counts as that zone being secure if
   (i) it does not pose electrical risks and (ii) it has at most 500 inhabitants*/
14: security_phase(_,Zone,preventive) count-as secure(Zone)
   while not( AnyState is electric_risky(Zone)) &
         ((nbInhabit(_,Zone,X)& X<=500) | security_phase(_,Zone,preventive) is secure(Zone)).

/* A zone preventive phase of crisis managament counts as that zone being insecure if
   is electrical risky */
15: security_phase(_,Zone,preventive) count-as insecure(Zone)
   while AnyState is electric_risky(Zone).


/* A zone emergency phase of crisis managament allways counts as that zone being insecure */
16: security_phase(_,Zone,emergency) count-as insecure(Zone).


/*  A zone is electrical risky if an actor counting as a firefighter puts the tangible
    alert_tangible_object in the coordinates (1,2) */
17: count-as electric_risky(downtown)
   when putTangible(_,alert_tangible_object,1,2)[sai__agent(Actor)] 
   while Actor is firefighter.


/* The deadline to report informations is 60 seconds */
18: nticks(clock,Time) count-as max_time_to_inform
    while (Time mod 60000==0).


81: count-as priority(Zone)
   while nbInhabit(_,Zone,X)& 
         not(nbInhabit(_,Other,Y)&not(Other==Zone)&Y>X).



/* To implement in the environment */





/******* Constitutive rules related to the collaboration platform *********/

9: communicator count-as table_mediator.

10: regulator count-as interaction_inspector.

11: putTangible(Table,TangibleObject,X,Y)[sai__agent(Actor)] count-as 
   tangibleInteraction(Table,TangibleObject,X,Y,Actor).


12: putImagible(table_fire_brigade,wrong_action_imagible_object,1,2)[sai__agent(Actor)] 
    count-as inform_invalid_evacuation(downtown, firefighter).

13: putImagible(table_mayor,wrong_action_imagible_object,1,2)[sai__agent(Actor)] 
    count-as inform_invalid_evacuation(downtown, mayor).

14: count-as informTangibleInteraction(table_mayor,launch_tangible_object,X,Y)
    while tangibleIn(table_mayor,launch_tangible_object,X,Y) & 
          not(           
               not(imagibleIn(table_fire_brigade,launch_imagible_object,X,Y))
             ) .

15: count-as informTangibleInteraction(table_fire_brigade,launch_tangible_object,X,Y)
    while tangibleIn(table_fire_brigade,launch_tangible_object,X,Y) & 
          not(
               not(imagibleIn(table_mayor,launch_imagible_object,X,Y))
             ) .


/*11: count-as informTangibleInteraction(SourceTable,to1,X,Y)
    while tangibleIn(SourceTable,to1,X,Y) & 
          not(           
               artifact(workspace,TargetTable,_,_) & 
               not(SourceTable==TargetTable)&
               (TargetTable==table_mayor|TargetTable==table_fire_brigade|TargetTable==table_logistic_cell) &
               not(imagibleIn(TargetTable,img1,X,Y))
             ) .
*/
16: count-as informTangibleInteraction(SourceTable,alert_tangible_object,X,Y)
    while tangibleIn(SourceTable,alert_tangible_object,X,Y) & 
          not(           
               artifact(workspace,TargetTable,_,_) & 
               not(SourceTable==TargetTable)&
               (TargetTable==table_mayor|TargetTable==table_fire_brigade|TargetTable==table_logistic_cell) &
               not(imagibleIn(TargetTable,img2,X,Y))
             ).

