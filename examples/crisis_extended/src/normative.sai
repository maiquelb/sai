/* normative program */
institution_id: crisis.



norms:

/****** Norms related to the crisis scenario ********/

/* The mayor is obliged to command evacuations of secure zones */
1: secure(Zone): mayor obliged command_evacuation(Zone) until not(secure(Zone)).

/* The mayor is prohibited to command evacuations of insecure zones */
2: insecure(Zone): mayor prohibited command_evacuation(Zone) until not(insecure(Zone)).  

/* The firefighter is prohibited to evacuate secure zones */
3: secure(Zone): firefighter prohibited evacuate(Zone) until not(secure(Zone)).

/* The firefighter is obliged to evacuate insecure zones */
4: insecure(Zone): firefighter obliged evacuate(Zone) until not(insecure(Zone)).

/* The logistic cell is obliged to evacuate a zone when a command is emitted */
5: command_evacuation(Zone): logistic_cell obliged evacuate(Zone).

/* The support cell is obliged to support the evacuation of a zone when a command is emitted */
6: command_evacuation(Zone): support_cell obliged support_evacuation(Zone).

/* The support cell is obliged to register evacuated people */
7: evacuate(Zone): support_cell obliged register_evacuated_people(Zone).

/* If there at least one zone in any phase of crisis, the mayor must name their representant on PCO  */
8: secure(Zone)|insecure(Zone) : mayor obliged name_representant_pco.

/* The mayor's representant in PCO is allways obliged to keeps a link between mayor and PCO*/
9: true: representant_pco obliged link_mayor_pco until max_time_to_inform.


/******* Norms related to the collaboration platform ******/


/* The communicator is obliged to inform that a tanngible interaction has taken place. He must do that before the next tangible interaction */
5: tangibleInteraction(SourceTable,TangibleObject,X,Y,_): 
         table_mediator obliged informTangibleInteraction(SourceTable,TangibleObject,X,Y) 
         until tangibleInteraction(OtherTable,OtherObject,OtherX,OtherY,_)&not(OtherTable==SourceTable&OtherObject==TangibleObject&OtherX==X&OtherY==Y).


/* Norms to deal with violations of prohibitions */
6: secure(Zone)&evacuate(downtown)[sai__agent(TriggerAgent)]& TriggerAgent is firefighter: interaction_inspector obliged inform_invalid_evacuation(Zone, firefighter).

7: insecure(Zone)&evacuate(downtown)[sai__agent(TriggerAgent)]& TriggerAgent is mayor: interaction_inspector obliged inform_invalid_evacuation(Zone, mayor).


