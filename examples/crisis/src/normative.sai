/* normative program */
institution_id: crisis.

/*
status_functions:

agents: mayor, firefighter, table_mediator, interaction_inspector.
events: evacuate(Zone), tangibleInteraction(Table,TangibleObject,X,Y,Actor), inform_invalid_evacuation(Zone,Target).
states: secure(Zone), insecure(Zone), electric_risky(Zone), informTangibleInteraction(Table,TangibleObject,X,Y).
*/


norms:

/****** Norms related to the crisis scenario ********/
1: secure(Zone): mayor obliged evacuate(Zone) until not(secure(Zone)).

2: insecure(Zone): mayor prohibited evacuate(Zone) until not(insecure(Zone)).   


3: secure(Zone): firefighter prohibited evacuate(Zone) until not(secure(Zone)).


4: insecure(Zone): firefighter obliged evacuate(Zone) until not(insecure(Zone)).


/******* Norms related to the collaboration platform ******/


/* The communicator is obliged to inform that a tanngible interaction has taken place. He must do that before the next tangible interaction */
5: tangibleInteraction(SourceTable,TangibleObject,X,Y,_): 
         table_mediator obliged informTangibleInteraction(SourceTable,TangibleObject,X,Y) 
         until tangibleInteraction(OtherTable,OtherObject,OtherX,OtherY,_)&not(OtherTable==SourceTable&OtherObject==TangibleObject&OtherX==X&OtherY==Y).


/* Norms to deal with violations of prohibitions */
6: secure(Zone)&evacuate(downtown)[sai__agent(TriggerAgent)]& TriggerAgent is firefighter: interaction_inspector obliged inform_invalid_evacuation(Zone, firefighter).

7: insecure(Zone)&evacuate(downtown)[sai__agent(TriggerAgent)]& TriggerAgent is mayor: interaction_inspector obliged inform_invalid_evacuation(Zone, mayor).


