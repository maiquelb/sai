scope organisation(house_group) {


   

   fcompatible(R1,R2,S) :- tsubrole(R1,R2).
   fcompatible(R1,R2,S) :- (tsubrole(R1,R1a) & (tsubrole(R2,R2a) & compatible(R1a,R2a,S))).
   fcompatible(R1,R2,S) :- tcompatible(R1,R2,S,[R1,R2]).
   tcompatible(R1,R2,S,Path) :- (compatible(R1,R3,S) & (not (.member(R3,Path)) & tcompatible(R3,R2,S,[R3|Path]))).

   tsubrole(R,R) :- true.
   tsubrole(R1,R2) :- subrole(R1,R2).
   tsubrole(R1,R2) :- (subrole(R1,R3) & tsubrole(R3,R2)).
   subrole(house_owner,soc).
   subrole(building_company,soc).
   subrole(painter,building_company).
   subrole(bricklayer,building_company).
   subrole(window_fitter,building_company).
   subrole(plumber,building_company).
   subrole(electrician,building_company).
   subrole(roofer,building_company).
   subrole(site_prep_contractor,building_company).
   subrole(door_fitter,building_company).


   rplayers(R,G,V)    :- .count(play(_,R,G),V).

   all_subgroups_well_formed([]).
   all_subgroups_well_formed([H|T]) :- subgroup_well_formed(H) & all_subgroups_well_formed(T).

	
   norm role_in_group: 
           play(Agt,R,Gr) &
           group_id(Gr) &
           not role_cardinality(R,_,_)
        -> fail(role_in_group(Agt,R,Gr)).
   norm role_cardinality: 
           group_id(Gr) &
           role_cardinality(R,_,RMax) &
           rplayers(R,Gr,RP) &
           RP > RMax
        -> fail(role_cardinality(R,Gr,RP,RMax)).
   norm role_compatibility: 
           play(Agt,R1,Gr) &
           play(Agt,R2,Gr) &
           R1 < R2 &
           not fcompatible(R1,R2,gr_inst)
        -> fail(role_compatibility(R1,R2,Gr)).
   norm well_formed_responsible: 
           responsible(Gr,S) &
           not monitor_scheme(S) &
           not well_formed(Gr)
        -> fail(well_formed_responsible(Gr)).
   norm subgroup_in_group: 
           group_id(Gr) &
           subgroup(G,GT,Gr) &
           not subgroup_cardinality(GT,_,_)
        -> fail(subgroup_in_group(G,GT,Gr)).
   norm subgroup_cardinality: 
           group_id(Gr) &
           subgroup_cardinality(SG,_,SGMax) &
           .count(subgroup(_,SG,Gr),SGP) &
           SGP > SGMax
        -> fail(subgroup_cardinality(SG,Gr,SGP,SGMax)).
}

