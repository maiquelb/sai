/**/
institution_id : bhInst.


status_functions:

agents: house_owner, site_prep_contractor, bricklayer, roofer, window_fitter, door_fitter, plumber, electrician, painter.

events: to_bid(Value), site_teste.

states: achieved(S,G,A), play(A,R,G), fplay(A,R,G), committed(A,Mission,S), responsible(G,S), all_satisfied(S,G), enabled(S,G), mplayers(Mission,Scheme,V), mission_role(Mission, Role), mission_accomplished(Scheme,Mission), well_formed(Scheme), mission_goal(Mission,Goal), role_cardinality(Role,Min,Max), rplayers(Group, Role, RP), subrole(Subrole,Role), tsubrole(Subrole,Role), compatible(R1,R2,Group), fcompatible(R1,R2,Group).




constitutive_rules:

0: xxxx count-as to_bid(100).

0: xxxx count-as to_bid(KKKK).

1: giacomo count-as house_owner.

 
2: Agent count-as site_prep_contractor
   while currentWinner(auction_for_SitePreparation,Agent)&
         nticks(clock,Time)&(Time>5000).

2: Agent count-as bricklayer
   while (currentWinner(auction_for_Floors,Agent)|currentWinner(auction_for_Walls,Agent))&
         nticks(clock,Time)&(Time>5000).

3: Agent count-as roofer
   while currentWinner(auction_for_Roof,Agent)&
         nticks(clock,Time)&(Time>5000).

4: Agent count-as window_fitter
   while currentWinner(auction_for_WindowsDoors,Agent)&
         nticks(clock,Time)&(Time>5000).
	 
5: Agent count-as door_fitter
   while currentWinner(auction_for_WindowsDoors,Agent)&
         nticks(clock,Time)&(Time>5000).

6: Agent count-as plumber
   while currentWinner(auction_for_Plumbing,Agent)&
         nticks(clock,Time)&(Time>5000).

7: Agent count-as electrician
   while currentWinner(auction_for_ElectricalSystem,Agent)&
         nticks(clock,Time)&(Time>5000).

8: Agent count-as painter
   while currentWinner(auction_for_Painting,Agent)&
         nticks(clock,Time)&(Time>5000).


9: count-as play(A,house_owner,"hsh_group")
   while (A is house_owner).

10: count-as play(A,site_prep_contractor,"hsh_group")
   while (A is site_prep_contractor).

11: count-as play(A,bricklayer,"hsh_group")
   while (A is bricklayer).

12: count-as play(A,roofer,"hsh_group")
   while (A is roofer).

13: count-as play(A,window_fitter,"hsh_group")
   while (A is window_fitter).

14: count-as play(A,door_fitter,"hsh_group")
   while (A is door_fitter).

15: count-as play(A,plumber,"hsh_group")
   while (A is plumber).

16: count-as play(A,electrician,"hsh_group")
    while (A is electrician).

17: count-as play(A,painter,"hsh_group")
   while (A is painter).



18: play(A,R,G) count-as fplay(A,R,G)./* fplay(A,R,G): used by the NPL program. */



/*
  committed(Agent,Mission,Group): in this particular application, the fact of an agent carrying a status function means that the agent is committed with a specific mission.
*/


19: count-as committed(A,management_of_house_building,"bhsch")
    while (A is house_owner)&(AnyState is well_formed("hsh_group")).

20: count-as committed(A,prepare_site,"bhsch")
    while (A is site_prep_contractor)&(AnyState is well_formed("hsh_group")).

21: count-as committed(A,lay_floors,"bhsch")
   while (A is bricklayer)&(AnyState is well_formed("hsh_group")).

22: count-as committed(A,build_walls,"bhsch")
   while (A is bricklayer)&(AnyState is well_formed("hsh_group")).

22: play(A,roofer,"hsh_group")
   count-as committed(A,build_roof,"bhsch")
   while (AnyState is well_formed("hsh_group")).

23: count-as committed(A,fit_windows,"bhsch")
   while (A is window_fitter)&(AnyState is well_formed("hsh_group")).

24: count-as committed(A,fit_doors,"bhsch")
   while (A is door_fitter)&(AnyState is well_formed("hsh_group")).

24: count-as committed(A,install_plumbing,"bhsch")
   while (A is plumber)&(AnyState is well_formed("hsh_group")).

25: count-as committed(A,install_electrical_system,"bhsch")
   while (A is electrician)&(AnyState is well_formed("hsh_group")).

26: count-as committed(A,paint_house,"bhsch")
   while (A is painter)&(AnyState is well_formed("hsh_group")).





27: count-as well_formed("hsh_group")
   while (Electrician1 is electrician)  &  not((Electrician2 is electrician) & not(Electrician1==Electrician2)) &
         (Site_prep_contractor1 is site_prep_contractor) &  not((Site_prep_contractor2 is site_prep_contractor) & not(Site_prep_contractor1==Site_prep_contractor2))&
         (Bricklayer1 is bricklayer) & (Bricklayer2 is bricklayer) &  not((Bricklayer3 is bricklayer) & not(Bricklayer1==Bricklayer2) & not(Bricklayer2==Bricklayer3))&
         (Plumber1 is plumber)  &  not((Plumber2 is plumber) & not(Plumber1==Plumber2)) &
          (Window_fitter1 is window_fitter) &  not((Window_fitter2 is window_fitter) & not(Window_fitter1==Window_fitter2))&
          (Door_fitter1 is door_fitter)& not((Door_fitter2 is door_fitter) & not(Door_fitter1==Door_fitter2)) &
          (Roofer1 is roofer) &  not((Roofer2 is roofer) & not(Roofer1==Roofer2))&
          (House_owner1 is house_owner) &  not((House_owner2 is house_owner) & not(House_owner1==House_owner2)).



/*
  responsible(Group,Scheme): in this particular example, the group being well formed is the suficient condition to the group be responsible to 				     the building house scheme. 
*/
29: well_formed("hsh_group")
    count-as responsible("hsh_group","bhsch").



/* achieved("bhsch",Goal,Agent): in this particular application, some events occurring in the environment lead the institution to state where the state-status function achieved("bhsch",Goal,Agent) holds */
30: count-as achieved("bhsch",site_prepared,Agent)
    when prepareSite[sai__agent(Agent)].

31: count-as achieved("bhsch",electrical_system_installed,Agent)
    when installElectricalSystem[sai__agent(Agent)].

32: count-as achieved("bhsch",floors_laid,Agent)
    when layFloors[sai__agent(Agent)].

33: count-as achieved("bhsch",walls_built,Agent)
    when buildWalls[sai__agent(Agent)].

34: count-as achieved("bhsch",roof_built,Agent)
    when buildRoof[sai__agent(Agent)].

35: count-as achieved("bhsch",windows_fitted,Agent)
    when fitWindows[sai__agent(Agent)].

36: count-as achieved("bhsch",doors_fitted,Agent)
    when fitDoors[sai__agent(Agent)].

37: count-as achieved("bhsch",plumbing_installed,Agent)
    when installPlumbing[sai__agent(Agent)].

38: count-as achieved("bhsch",electrical_system_installed,Agent)
    when installElectricalSystem[sai__agent(Agent)].

39: count-as achieved("bhsch",exterior_painted,Agent)
   when paintExterior[sai__agent(Agent)].

40: count-as achieved("bhsch",interior_painted,Agent)
    when paintInterior[sai__agent(Agent)].


41: count-as achieved("bhsch",house_built,Agent)
    while play(Agent,house_owner,"hsh_group")&
          achieved("bhsch",site_prepared,_)&
          achieved("bhsch",floors_laid,_)& 
          achieved("bhsch",walls_built,_)& 
          achieved("bhsch",roof_built,_)& 
          achieved("bhsch",windows_fitted,_)&
          achieved("bhsch",doors_fitted,_)&
          achieved("bhsch",plumbing_installed,_)&
          achieved("bhsch",electrical_system_installed,_)&
          achieved("bhsch",exterior_painted,_)&
          achieved("bhsch",interior_painted,_).
 


/* all_satisfied("bhsch", G): under certain circumstances, achieving goal G counts as satisfying all the subgoals of a root goal which G is part of 
   This status function is part of the NOPL internal management.
*/


42: achieved("bhsch",site_prepared,_)
    count-as all_satisfied("bhsch", site_prepared).


43: achieved("bhsch",floors_laid,_)
   count-as all_satisfied("bhsch", floors_laid).


44: achieved("bhsch",walls_built,_)
    count-as all_satisfied("bhsch", walls_built).

45: achieved("bhsch",interior_painted,_)
   count-as all_satisfied("bhsch", interior_painted).

46: achieved("bhsch",roof_built,_)
    count-as all_satisfied("bhsch", rwd)
    while achieved("bhsch",windows_fitted,_) &
          achieved("bhsch",doors_fitted, _).

47: achieved("bhsch",exterior_painted,_)
    count-as all_satisfied("bhsch", pee)
    while achieved("bhsch",plumbing_installed,_) & 
          achieved("bhsch",electrical_system_installed,_).

48: achieved("bhsch",interior_painted,_)
   count-as all_satisfied("bhsch", interior_painted).

49: all_satisfied("bhsch", interior_painted)
   count-as all_satisfied("bhsch", house_built)
   while all_satisfied("bhsch", floors_laid)&
         all_satisfied("bhsch", walls_built)&
         all_satisfied("bhsch", rwd)&
         all_satisfied("bhsch", pee)&
         all_satisfied("bhsch", interior_painted).



/* enabled(S,G): the goal G is enabled to be achieved in the scheme S */
50: all_satisfied("bhsch", interior_painted)
    count-as enabled("bhsch",house_built).

51: responsible(_,"bhsch") /*to see - not exactly as in npl paper*/
    count-as enabled("bhsch",site_prepared).

52: all_satisfied("bhsch", site_prepared)
    count-as enabled("bhsch",floors_laid).

53: all_satisfied("bhsch", floors_laid)
    count-as enabled("bhsch",walls_built).

54: achieved("bhsch",roof_built,_) /*to see - model "all_satisfied" to all the subgoals*/
    count-as enabled("bhsch", rwd)
    while achieved("bhsch",windows_fitted,_) &
          achieved("bhsch",doors_fitted, _).
   
55: all_satisfied("bhsch", walls_built)
    count-as enabled("bhsch",roof_built).

56: all_satisfied("bhsch", walls_built) 
    count-as enabled("bhsch",windows_fitted).

57: all_satisfied("bhsch", walls_built) 
    count-as enabled("bhsch",doors_fitted).


58: achieved("bhsch",exterior_painted,_) /*to see - model "all_satisfied" to all the subgoals*/
    count-as enabled("bhsch",pee)
    while achieved("bhsch",plumbing_installed,_) & 
          achieved("bhsch",electrical_system_installed,_).

59: all_satisfied("bhsch", rwd)
    count-as enabled("bhsch",plumbing_installed).

60: all_satisfied("bhsch", rwd)
    count-as enabled("bhsch",electrical_system_installed).

61: all_satisfied("bhsch", rwd)
    count-as enabled("bhsch",exterior_painted).

62: all_satisfied("bhsch", pee)
    count-as enabled("bhsch",interior_painted).


/* mplayers(M,S,NP): there are NP agents committed to the mission M in the scheme S. 
   This status function is part of the NOPL internal management.
   The NOPL engine uses to check whether the number of agents committed to a mission fits in expected cardinality (i.e. Min<= NP <= Max). 
   The NOPL engine counts the number of agents committed to the missions. 
   But, as the aim in NOPL is basically to check if this number under, between or above the cardinality, we consider that
      - NP = Min-1 when the number of committed agents is lower than Min
      - NP = Max when the number of committed agents is between Min and Max
      - NP = Max+1 when the number of committed agents is upper than Max
*/
63: count-as mplayers(management_of_house_building,S,0)
    while not(committed(_,management_of_house_building,S)).

64: count-as mplayers(prepare_site,S,0)
    while not(committed(_,prepare_site,S)).  

65: count-as mplayers(lay_floors,S,0)
    while not(committed(_,lay_floors,S)).

66: count-as mplayers(build_walls,S,0)
    while not(committed(_,build_walls,S)).    

67: count-as mplayers(build_roof,S,0)
    while not(committed(_,build_roof,S)).    

68: count-as mplayers(fit_windows,S,0)
    while not(committed(_,fit_windows,S)).

69: count-as mplayers(fit_doors,S,0)
    while not(committed(_,fit_doors,S)).

70: count-as mplayers(install_plumbing,S,0)
    while not(committed(_,install_plumbing,S)).  
 
71: count-as mplayers(install_electrical_system,S,0)
    while not(committed(_,install_electrical_system,S)).      

72: count-as mplayers(paint_house,S,0)
    while not(committed(_,paint_house,S)).                            

73: count-as mplayers(management_of_house_building,S,1)
    while committed(Ag1,management_of_house_building,S)&
          not(committed(Ag2,management_of_house_building,S)&not(Ag1==Ag2)).

74: count-as mplayers(prepare_site,S,1)
    while committed(Ag1,prepare_site,S)&
          not(committed(Ag2,prepare_site,S)&not(Ag1==Ag2)). 

75: count-as mplayers(lay_floors,S,1)
    while committed(Ag1,lay_floors,S)&
          not(committed(Ag2,lay_floors,S)&not(Ag1==Ag2)).

76: count-as mplayers(build_walls,S,1)
    while committed(Ag1,build_walls,S)&
          not(committed(Ag2,build_walls,S)&not(Ag1==Ag2)).    

77: count-as mplayers(build_roof,S,1)
    while committed(Ag1,build_roof,S)&
          not(committed(Ag2,build_roof,S)&not(Ag1==Ag2)).    

78: count-as mplayers(fit_windows,S,1)
    while committed(Ag1,fit_windows,S)&
          not(committed(Ag2,fit_windows,S)&not(Ag1==Ag2)).    

79: count-as mplayers(fit_doors,S,1)
    while committed(Ag1,fit_doors,S)&
          not(committed(Ag2,fit_doors,S)&not(Ag1==Ag2)).

80: count-as mplayers(install_plumbing,S,1)
    while committed(Ag1,install_plumbing,S)&
          not(committed(Ag2,install_plumbing,S)&not(Ag1==Ag2)).  

81: count-as mplayers(install_electrical_system,S,1)
    while committed(Ag1,install_electrical_system,S)&
          not(committed(Ag2,install_electrical_system,S)&not(Ag1==Ag2)).      

82: count-as mplayers(paint_house,S,1)
    while committed(Ag1,paint_house,S)&
          not(committed(Ag2,paint_house,S)&not(Ag1==Ag2)). 



83: count-as mplayers(management_of_house_building,S,2)
    while committed(Ag1,management_of_house_building,S)&
          committed(Ag2,management_of_house_building,S)&not(Ag1==Ag2).

84: count-as mplayers(prepare_site,S,2)
    while committed(Ag1,prepare_site,S)&
          committed(Ag2,prepare_site,S)&not(Ag1==Ag2). 

85: count-as mplayers(lay_floors,S,2)
    while committed(Ag1,lay_floors,S)&
          committed(Ag2,lay_floors,S)&not(Ag1==Ag2).

86: count-as mplayers(build_walls,S,2)
    while committed(Ag1,build_walls,S)&
          committed(Ag2,build_walls,S)&not(Ag1==Ag2).    

87: count-as mplayers(build_roof,S,2)
    while committed(Ag1,build_roof,S)&
          committed(Ag2,build_roof,S)&not(Ag1==Ag2).    

88: count-as mplayers(fit_windows,S,2)
    while committed(Ag1,fit_windows,S)&
          committed(Ag2,fit_windows,S)&not(Ag1==Ag2).    

89: count-as mplayers(fit_doors,S,2)
    while committed(Ag1,fit_doors,S)&
          committed(Ag2,fit_doors,S)&not(Ag1==Ag2).

90: count-as mplayers(install_plumbing,S,2)
    while committed(Ag1,install_plumbing,S)&
          committed(Ag2,install_plumbing,S)&not(Ag1==Ag2).  

91: count-as mplayers(install_electrical_system,S,2)
    while committed(Ag1,install_electrical_system,S)&
          committed(Ag2,install_electrical_system,S)&not(Ag1==Ag2).      

92: count-as mplayers(paint_house,S,2)
    while committed(Ag1,paint_house,S)&
          committed(Ag2,paint_house,S)&not(Ag1==Ag2). 



/* mission_role(M,R):  the system may be in states s.t. the role M is obliged/permitted to commit to M.
                       These obligations/permissions are currently static on NOPL, i.e. they do not change according to the circumnstances. This is why both were and while clauses are omitted in the following constitutive rules.
*/
93: count-as mission_role(management_of_house_building,house_owner).

94: count-as mission_role(prepare_site,site_prep_contractor).

95: count-as mission_role(lay_floors,bricklayer).

96: count-as mission_role(build_walls,bricklayer).

97: count-as mission_role(build_roof,roofer).

98: count-as mission_role(fit_windows,window_fitter).

99: count-as mission_role(fit_doors,door_fitter).

100: count-as mission_role(install_plumbing,plumber).

101: count-as mission_role(install_electrical_system,electrician).

102: count-as mission_role(paint_house,painter).

/* 
   mission_accomplished(S,M): in Moise, a mission M is accomplished when all their related goals have been fulfilled. 
*/

103: all_satisfied(Scheme,house_built)
     count-as mission_accomplished(Scheme,management_of_house_building).

104: all_satisfied(Scheme,site_prepared)
     count-as mission_accomplished(Scheme,prepare_site).

105: all_satisfied(Scheme,floors_laid)
     count-as mission_accomplished(Scheme,lay_floors).

106: all_satisfied(Scheme,walls_built)
     count-as mission_accomplished(Scheme,build_walls).

107: all_satisfied(Scheme,roof_built)
     count-as mission_accomplished(Scheme,build_roof).

108: all_satisfied(Scheme,windows_fitted)
     count-as mission_accomplished(Scheme,fit_windows).

109: all_satisfied(Scheme,doors_fitted)
     count-as mission_accomplished(Scheme,fit_doors).

110: all_satisfied(Scheme,install_plumbing)
     count-as mission_accomplished(Scheme,plumbing_installed).

111: all_satisfied(Scheme,electrical_system_installed)
     count-as mission_accomplished(Scheme,install_electrical_system).

112: all_satisfied(Scheme,interior_painted)
     count-as mission_accomplished(Scheme,paint_house)
     while all_satisfied(Scheme,exterior_painted).


113: count-as well_formed(Scheme)
     while (mission_accomplished(Scheme,build_walls) | (mplayers(build_walls,Scheme,Vbuild_walls) & (Vbuild_walls >= 1) & (Vbuild_walls <= 1)))&
           (mission_accomplished(Scheme,fit_doors) | (mplayers(fit_doors,Scheme,Vfit_doors) & (Vfit_doors >= 1) & (Vfit_doors <= 1)))&
           (mission_accomplished(Scheme,fit_windows) | (mplayers(fit_windows,Scheme,Vfit_windows) & (Vfit_windows >= 1)&(Vfit_windows <= 1)))&(mission_accomplished(S,build_roof) | (mplayers(build_roof,S,Vbuild_roof) & (Vbuild_roof >= 1) & (Vbuild_roof <= 1))) &  
           (mission_accomplished(Scheme,paint_house) | (mplayers(paint_house,Scheme,Vpaint_house) & (Vpaint_house >= 1) & (Vpaint_house <= 1))) &
           (mission_accomplished(Scheme,install_electrical_system) | (mplayers(install_electrical_system,Scheme,Vinstall_electrical_system) & (Vinstall_electrical_system >= 1) & (Vinstall_electrical_system <= 1))) & 
           (mission_accomplished(Scheme,prepare_site) | (mplayers(prepare_site,Scheme,Vprepare_site) & (Vprepare_site >= 1) & (Vprepare_site <= 1))) &
           (mission_accomplished(Scheme,lay_floors) | (mplayers(lay_floors,Scheme,Vlay_floors) & (Vlay_floors >= 1) & (Vlay_floors <= 1))).




/* 
  mission_goal(M,G): Moise related goals G to missions M. 
                     This relation is currently static on NOPL, i.e. it comes from the Moise specification and does not change according to the circumnstances. This is why both were and while clauses are omitted in the following constitutive rules.   
*/
114: count-as mission_goal(build_walls,walls_built).

115: count-as mission_goal(fit_doors,doors_fitted).

116: count-as mission_goal(fit_windows,windows_fitted).

117: count-as mission_goal(management_of_house_building,house_built).

118: count-as mission_goal(build_roof,roof_built). 

119: count-as mission_goal(paint_house,exterior_painted).

120: count-as mission_goal(paint_house,interior_painted).

121: count-as mission_goal(install_electrical_system,electrical_system_installed).

122: count-as mission_goal(prepare_site,site_prepared).

123: count-as mission_goal(lay_floors,floors_laid).

124: count-as mission_goal(install_plumbing,plumbing_installed).
    

/* 
   role_cardinality(R,Min,Max): Moise related specifies cardinalites for roles. A role R may have N players s.t. Min <= N <= Max.
                                This cardinality is currently static on NOPL, i.e. it comes from the Moise specification and does not change according to the circumnstances. This is why both were and while clauses are omitted in the following constitutive rules.   
*/
125: count-as role_cardinality(house_owner,1,1).

126: count-as role_cardinality(site_prep_contractor,1,1).

127: count-as role_cardinality(bricklayer,1,2).

128: count-as role_cardinality(roofer,1,1).

129: count-as role_cardinality(window_fitter,1,1).

130: count-as role_cardinality(door_fitter,1,1).

131: count-as role_cardinality(plumber,1,1).

132: count-as role_cardinality(electrician,1,1).

133: count-as role_cardinality(painter,1,1).


/* 
  rplayers(G,R,RP): The institution may be in states where there are RP agents playing the role R in the group GR. 
                    This status function is part of the NOPL internal management.
                    The NOPL engine uses to check role cardinalities (i.e. Min<= NP <= Max). 
		    The NOPL engine counts the number of agents playing the roles. 
		    But, as the aim in NOPL is basically to check if this number under, between or above the cardinality, we consider that
			- NR = Min-1 when the number of role players is lower than Min;
		        - NP = Max when the number of role players is between Min and Max
		        - NP = Max+1 when the number of role players is upper than Max
*/

134: count-as rplayers(G, house_owner, 0) 
     while not(play(_,house_owner,G)).

135: count-as rplayers(G, painter, 0) 
     while not(play(_,painter,G)).

136: count-as rplayers(G, bricklayer, 0) 
     while not(play(_,painter,G)).

137: count-as rplayers(G, window_fitter, 0) 
     while not(play(_,window_fitter,G)).

138: count-as rplayers(G, plumber, 0) 
     while not(play(_,plumber,G)).

139: count-as rplayers(G, electrician, 0) 
     while not(play(_,electrician,G)).

140: count-as rplayers(G, roofer, 0) 
     while not(play(_,roofer,G)).

141: count-as rplayers(G, site_prep_contractor, 0) 
     while not(play(_,site_prep_contractor,G)).

142: count-as rplayers(G, door_fitter, 0) 
     while not(play(_,door_fitter,G)).

143: count-as rplayers(G, house_owner, 1) 
     while play(A1,house_owner,G)&
           not(play(A2,house_owner,G)&not(A1==A2)).

144: count-as rplayers(G, painter, 1) 
     while play(A1,painter,G)&
           not(play(A2,painter,G)&not(A1==A2)).

145: count-as rplayers(G, bricklayer, 1) 
     while play(A1,bricklayer,G)&
           play(A2,bricklayer,G)&
           not(play(A3,bricklayer,G)&not(A1==A3)&not(A2==A3)).

146: count-as rplayers(G, window_fitter, 1) 
     while play(A1,window_fitter,G)&
           not(play(A2,window_fitter,G)&not(A1==A2)).
 
147: count-as rplayers(G, plumber, 1) 
     while play(A1,plumber,G)&
           not(play(A2,plumber,G)&not(A1==A2)).
 
148: count-as rplayers(G, electrician, 1) 
     while play(A1,electrician,G)&
           not(play(A2,electrician,G)&not(A1==A2)).

149: count-as rplayers(G, roofer, 1) 
     while play(A1,roofer,G)&
           not(play(A2,roofer,G)&not(A1==A2)).

150: count-as rplayers(G, site_prep_contractor, 1) 
     while play(A1,site_prep_contractor,G)&
           not(play(A2,site_prep_contractor,G)&not(A1==A2)).

151: count-as rplayers(G, door_fitter, 1) 
     while play(A1,door_fitter,G)&
           not(play(A2,door_fitter,G)&not(A1==A2)).



152: count-as rplayers(G, house_owner, 2) 
     while play(A1,house_owner,G)&
           play(A2,house_owner,G)&not(A1==A2).

153: count-as rplayers(G, painter, 2) 
     while play(A1,painter,G)&
           play(A2,painter,G)&not(A1==A2).

154: count-as rplayers(G, bricklayer, 3) 
     while play(A1,bricklayer,G)&
           play(A2,bricklayer,G)&
           play(A3,bricklayer,G)&not(A1==A3)&not(A2==A3).

155: count-as rplayers(G, window_fitter, 2) 
     while play(A1,window_fitter,G)&
           play(A2,window_fitter,G)&not(A1==A2).

156: count-as rplayers(G, plumber, 2) 
     while play(A1,plumber,G)&
           play(A2,plumber,G)&not(A1==A2).
  
157: count-as rplayers(G, electrician, 2) 
     while play(A1,electrician,G)&
           play(A2,electrician,G)&not(A1==A2).

158: count-as rplayers(G, roofer, 2) 
     while play(A1,roofer,G)&
           play(A2,roofer,G)&not(A1==A2).
 
159: count-as rplayers(G, site_prep_contractor, 2) 
     while play(A1,site_prep_contractor,G)&
           play(A2,site_prep_contractor,G)&not(A1==A2).

160: count-as rplayers(G, door_fitter, 2) 
     while play(A1,door_fitter,G)&
           play(A2,door_fitter,G)&not(A1==A2).


/* 
   subrole(S,R): under certain conditions, subrole S is a subrole of the role R.
                 This relation is currently static on NOPL, i.e. it comes from the Moise specification and does not change according to the circumnstances. This is why both were and while clauses are omitted in the following constitutive rules.   
*/
161: count-as subrole(house_owner,soc).

162: count-as subrole(building_company,soc).

163: count-as subrole(painter,building_company).

164: count-as subrole(bricklayer,building_company).

165: count-as subrole(window_fitter,building_company).

166: count-as subrole(plumber,building_company).

167: count-as subrole(electrician,building_company).

168: count-as subrole(roofer,building_company).

169: count-as subrole(site_prep_contractor,building_company).

170: count-as subrole(door_fitter,building_company).

/*
   tsubrole(Subrole,Role): a transitive relation between Subrole and Role: if Subrole is a subrole of RR and if RR is subrole of Role, then Subrole is a subrole of Role.
*/

171: count-as tsubrole(Subrole,Role)
   while subrole(Subrole,Role)|
         (subrole(Subrole,RR)&subrole(RR,Role)).

/*
  compatible(R1,R2,Group): the role R1 is compatible with the role R2 in the group Group
*/


172: count-as compatible(building_company,building_company,gr_inst).

/*
2: count-as fcompatible(R1,R2,S) 	
   while tsubrole(R1,R2)|
         (tsubrole(R1,R1a) & tsubrole(R2,R2a)).
*/         


/*
2: count-as fcompatible(R1,R2,S) 	
   while tsubrole(R1,R2).
*/

2: count-as fcompatible(R1,R2,S) 	
   while tsubrole(R1,R2)|
         (tsubrole(R1,R1a) & tsubrole(R2,R2a) & compatible(R1a,R2a,S) & not(R1==R2)).

